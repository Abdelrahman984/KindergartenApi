// <auto-generated />
using System;
using Kindergarten.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kindergarten.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250918225439_FeeTransactionId")]
    partial class FeeTransactionId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Kindergarten.Domain.Entities.Attendance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("ArrivalTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId", "Date")
                        .IsUnique();

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ClassSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ClassSessions");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Classroom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Capacity = 20,
                            Name = "KG1"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Capacity = 25,
                            Name = "KG2"
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            Capacity = 30,
                            Name = "KG3"
                        });
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Fee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TransactionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Fees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Pending",
                            StudentId = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000002"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            PaymentDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StudentId = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            TransactionId = "1DONE1"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000003"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Overdue",
                            StudentId = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000004"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            PaymentDate = new DateTime(2024, 9, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StudentId = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            TransactionId = "2DONE2"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000005"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = "Pending",
                            StudentId = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000006"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = "Overdue",
                            StudentId = new Guid("11111111-aaaa-aaaa-aaaa-111111111111")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000007"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Status = "Pending",
                            StudentId = new Guid("22222222-bbbb-bbbb-bbbb-222222222222")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000008"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            PaymentDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StudentId = new Guid("33333333-cccc-cccc-cccc-333333333333"),
                            TransactionId = "3DONE3"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000009"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Status = "Overdue",
                            StudentId = new Guid("44444444-dddd-dddd-dddd-444444444444")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000010"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            PaymentDate = new DateTime(2024, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StudentId = new Guid("55555555-eeee-eeee-eeee-555555555555"),
                            TransactionId = "4DONE4"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000011"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Status = "Pending",
                            StudentId = new Guid("66666666-aaaa-aaaa-aaaa-666666666666")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000012"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Status = "Overdue",
                            StudentId = new Guid("77777777-bbbb-bbbb-bbbb-777777777777")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000013"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Status = "Pending",
                            StudentId = new Guid("88888888-cccc-cccc-cccc-888888888888")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000014"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            PaymentDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StudentId = new Guid("99999999-dddd-dddd-dddd-999999999999"),
                            TransactionId = "5DONE5"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000015"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Status = "Overdue",
                            StudentId = new Guid("aaaaaaa1-eeee-eeee-eeee-aaaaaaaaaaaa")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000016"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            PaymentDate = new DateTime(2024, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StudentId = new Guid("bbbbbbb2-aaaa-aaaa-aaaa-bbbbbbbbbbbb"),
                            TransactionId = "6DONE6"
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000017"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Status = "Pending",
                            StudentId = new Guid("ccccccc3-bbbb-bbbb-bbbb-cccccccccccc")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000018"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Status = "Overdue",
                            StudentId = new Guid("ddddddd4-cccc-cccc-cccc-dddddddddddd")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000019"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = "Pending",
                            StudentId = new Guid("eeeeeee5-dddd-dddd-dddd-eeeeeeeeeeee")
                        },
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000020"),
                            Amount = 1500m,
                            DueDate = new DateTime(2024, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ParentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            PaymentDate = new DateTime(2024, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Paid",
                            StudentId = new Guid("fffffff6-eeee-eeee-eeee-ffffffffffff"),
                            TransactionId = "7DONE7"
                        });
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Parent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Parents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            Address = "١٢٣ شارع الرئيسي، القاهرة",
                            FullName = "أحمد علي",
                            PhoneNumber = "01012345678"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            Address = "٤٥٦ شارع الحديقة، الإسكندرية",
                            FullName = "بكري حسن",
                            PhoneNumber = "01098765432"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            Address = "٧٨٩ طريق الحديقة، الجيزة",
                            FullName = "حسام يوسف",
                            PhoneNumber = "0103334444"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            Address = "١٠١ شارع النيل، القاهرة",
                            FullName = "طارق سمير",
                            PhoneNumber = "0104445555"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            Address = "٢٠٢ شارع الحرية، الإسكندرية",
                            FullName = "خالد عادل",
                            PhoneNumber = "0106667777"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            Address = "٣٠٣ شارع الجامعة، الجيزة",
                            FullName = "عمر ناصر",
                            PhoneNumber = "0108889999"
                        });
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GrandpaName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ParentPhone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("ParentId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            Address = "١٢٣ شارع الرئيسي، القاهرة",
                            ClassroomId = new Guid("77777777-7777-7777-7777-777777777777"),
                            DateOfBirth = new DateTime(2019, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "أحمد",
                            FirstName = "عمر",
                            GrandpaName = "محمد",
                            IsActive = true,
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ParentPhone = "01012345678"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            Address = "١٢٣ شارع الرئيسي، القاهرة",
                            ClassroomId = new Guid("77777777-7777-7777-7777-777777777777"),
                            DateOfBirth = new DateTime(2020, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "أحمد",
                            FirstName = "ملك",
                            GrandpaName = "محمد",
                            IsActive = true,
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ParentPhone = "01012345678"
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            Address = "١٢٣ شارع الرئيسي، القاهرة",
                            ClassroomId = new Guid("77777777-7777-7777-7777-777777777777"),
                            DateOfBirth = new DateTime(2020, 5, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "أحمد",
                            FirstName = "سيف",
                            GrandpaName = "محمد",
                            IsActive = true,
                            ParentId = new Guid("11111111-1111-1111-1111-111111111111"),
                            ParentPhone = "01012345678"
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            Address = "٤٥٦ شارع الحديقة، الإسكندرية",
                            ClassroomId = new Guid("88888888-8888-8888-8888-888888888888"),
                            DateOfBirth = new DateTime(2020, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "بكري",
                            FirstName = "سارة",
                            GrandpaName = "علي",
                            IsActive = true,
                            ParentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ParentPhone = "01098765432"
                        },
                        new
                        {
                            Id = new Guid("eeeeeeee-eeee-eeee-eeee-eeeeeeeeeeee"),
                            Address = "٤٥٦ شارع الحديقة، الإسكندرية",
                            ClassroomId = new Guid("88888888-8888-8888-8888-888888888888"),
                            DateOfBirth = new DateTime(2021, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "بكري",
                            FirstName = "علا",
                            GrandpaName = "علي",
                            IsActive = true,
                            ParentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ParentPhone = "01098765432"
                        },
                        new
                        {
                            Id = new Guid("11111111-aaaa-aaaa-aaaa-111111111111"),
                            Address = "٤٥٦ شارع الحديقة، الإسكندرية",
                            ClassroomId = new Guid("88888888-8888-8888-8888-888888888888"),
                            DateOfBirth = new DateTime(2021, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "بكري",
                            FirstName = "ريم",
                            GrandpaName = "علي",
                            IsActive = true,
                            ParentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ParentPhone = "01098765432"
                        },
                        new
                        {
                            Id = new Guid("22222222-bbbb-bbbb-bbbb-222222222222"),
                            Address = "٧٨٩ طريق الحديقة، الجيزة",
                            ClassroomId = new Guid("99999999-9999-9999-9999-999999999999"),
                            DateOfBirth = new DateTime(2019, 10, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "حسام",
                            FirstName = "يوسف",
                            GrandpaName = "كامل",
                            IsActive = true,
                            ParentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ParentPhone = "0103334444"
                        },
                        new
                        {
                            Id = new Guid("33333333-cccc-cccc-cccc-333333333333"),
                            Address = "٧٨٩ طريق الحديقة، الجيزة",
                            ClassroomId = new Guid("99999999-9999-9999-9999-999999999999"),
                            DateOfBirth = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "حسام",
                            FirstName = "ليلى",
                            GrandpaName = "كامل",
                            IsActive = true,
                            ParentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ParentPhone = "0103334444"
                        },
                        new
                        {
                            Id = new Guid("44444444-dddd-dddd-dddd-444444444444"),
                            Address = "٧٨٩ طريق الحديقة، الجيزة",
                            ClassroomId = new Guid("99999999-9999-9999-9999-999999999999"),
                            DateOfBirth = new DateTime(2019, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "حسام",
                            FirstName = "طارق",
                            GrandpaName = "كامل",
                            IsActive = true,
                            ParentId = new Guid("33333333-3333-3333-3333-333333333333"),
                            ParentPhone = "0103334444"
                        },
                        new
                        {
                            Id = new Guid("55555555-eeee-eeee-eeee-555555555555"),
                            Address = "١٠١ شارع النيل، القاهرة",
                            ClassroomId = new Guid("77777777-7777-7777-7777-777777777777"),
                            DateOfBirth = new DateTime(2019, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "طارق",
                            FirstName = "محمود",
                            GrandpaName = "سمير",
                            IsActive = true,
                            ParentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ParentPhone = "0104445555"
                        },
                        new
                        {
                            Id = new Guid("66666666-aaaa-aaaa-aaaa-666666666666"),
                            Address = "١٠١ شارع النيل، القاهرة",
                            ClassroomId = new Guid("88888888-8888-8888-8888-888888888888"),
                            DateOfBirth = new DateTime(2020, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "طارق",
                            FirstName = "نور",
                            GrandpaName = "سمير",
                            IsActive = true,
                            ParentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ParentPhone = "0104445555"
                        },
                        new
                        {
                            Id = new Guid("77777777-bbbb-bbbb-bbbb-777777777777"),
                            Address = "١٠١ شارع النيل، القاهرة",
                            ClassroomId = new Guid("77777777-7777-7777-7777-777777777777"),
                            DateOfBirth = new DateTime(2020, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "طارق",
                            FirstName = "سلمى",
                            GrandpaName = "سمير",
                            IsActive = true,
                            ParentId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ParentPhone = "0104445555"
                        },
                        new
                        {
                            Id = new Guid("88888888-cccc-cccc-cccc-888888888888"),
                            Address = "٢٠٢ شارع الحرية، الإسكندرية",
                            ClassroomId = new Guid("99999999-9999-9999-9999-999999999999"),
                            DateOfBirth = new DateTime(2019, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "خالد",
                            FirstName = "زياد",
                            GrandpaName = "عادل",
                            IsActive = true,
                            ParentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ParentPhone = "0106667777"
                        },
                        new
                        {
                            Id = new Guid("99999999-dddd-dddd-dddd-999999999999"),
                            Address = "٢٠٢ شارع الحرية، الإسكندرية",
                            ClassroomId = new Guid("77777777-7777-7777-7777-777777777777"),
                            DateOfBirth = new DateTime(2020, 4, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "خالد",
                            FirstName = "جنى",
                            GrandpaName = "عادل",
                            IsActive = true,
                            ParentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ParentPhone = "0106667777"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaa1-eeee-eeee-eeee-aaaaaaaaaaaa"),
                            Address = "٢٠٢ شارع الحرية، الإسكندرية",
                            ClassroomId = new Guid("99999999-9999-9999-9999-999999999999"),
                            DateOfBirth = new DateTime(2020, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "خالد",
                            FirstName = "حسن",
                            GrandpaName = "عادل",
                            IsActive = true,
                            ParentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ParentPhone = "0106667777"
                        },
                        new
                        {
                            Id = new Guid("bbbbbbb2-aaaa-aaaa-aaaa-bbbbbbbbbbbb"),
                            Address = "٣٠٣ شارع الجامعة، الجيزة",
                            ClassroomId = new Guid("88888888-8888-8888-8888-888888888888"),
                            DateOfBirth = new DateTime(2021, 2, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "عمر",
                            FirstName = "فارس",
                            GrandpaName = "ناصر",
                            IsActive = true,
                            ParentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            ParentPhone = "0108889999"
                        },
                        new
                        {
                            Id = new Guid("ccccccc3-bbbb-bbbb-bbbb-cccccccccccc"),
                            Address = "٣٠٣ شارع الجامعة، الجيزة",
                            ClassroomId = new Guid("99999999-9999-9999-9999-999999999999"),
                            DateOfBirth = new DateTime(2019, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "عمر",
                            FirstName = "هناء",
                            GrandpaName = "ناصر",
                            IsActive = true,
                            ParentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            ParentPhone = "0108889999"
                        },
                        new
                        {
                            Id = new Guid("ddddddd4-cccc-cccc-cccc-dddddddddddd"),
                            Address = "٣٠٣ شارع الجامعة، الجيزة",
                            ClassroomId = new Guid("77777777-7777-7777-7777-777777777777"),
                            DateOfBirth = new DateTime(2019, 8, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "عمر",
                            FirstName = "مريم",
                            GrandpaName = "ناصر",
                            IsActive = true,
                            ParentId = new Guid("66666666-6666-6666-6666-666666666666"),
                            ParentPhone = "0108889999"
                        },
                        new
                        {
                            Id = new Guid("eeeeeee5-dddd-dddd-dddd-eeeeeeeeeeee"),
                            Address = "٤٥٦ شارع الحديقة، الإسكندرية",
                            ClassroomId = new Guid("88888888-8888-8888-8888-888888888888"),
                            DateOfBirth = new DateTime(2021, 1, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "بكري",
                            FirstName = "ياسمين",
                            GrandpaName = "حسن",
                            IsActive = true,
                            ParentId = new Guid("22222222-2222-2222-2222-222222222222"),
                            ParentPhone = "01098765432"
                        },
                        new
                        {
                            Id = new Guid("fffffff6-eeee-eeee-eeee-ffffffffffff"),
                            Address = "٢٠٢ شارع الحرية، الإسكندرية",
                            ClassroomId = new Guid("88888888-8888-8888-8888-888888888888"),
                            DateOfBirth = new DateTime(2020, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FatherName = "خالد",
                            FirstName = "آدم",
                            GrandpaName = "عادل",
                            IsActive = true,
                            ParentId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ParentPhone = "0106667777"
                        });
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Subject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Subjects");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000001"),
                            Name = "رياضيات"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000002"),
                            Name = "علوم"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000003"),
                            Name = "عربي"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000004"),
                            Name = "لغة إنجليزية"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000005"),
                            Name = "تربية فنية"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000006"),
                            Name = "تربية رياضية"
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000007"),
                            Name = "علوم الحاسوب"
                        });
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid?>("SubjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.ToTable("Teachers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            FullName = "فاطمة إبراهيم",
                            IsActive = true,
                            PhoneNumber = "0105551234",
                            SubjectId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000001")
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            FullName = "أماني صلاح",
                            IsActive = true,
                            PhoneNumber = "0107779999",
                            SubjectId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000002")
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            FullName = "عائشة مصطفى",
                            IsActive = true,
                            PhoneNumber = "0102226666",
                            SubjectId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000003")
                        },
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            FullName = "أميرة عبد الله",
                            IsActive = true,
                            PhoneNumber = "0108881111",
                            SubjectId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000004")
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            FullName = "هالة محمود",
                            IsActive = false,
                            PhoneNumber = "0109992222",
                            SubjectId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000005")
                        },
                        new
                        {
                            Id = new Guid("99999999-9999-9999-9999-999999999999"),
                            FullName = "خديجة حسن",
                            IsActive = true,
                            PhoneNumber = "0103335555",
                            SubjectId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000006")
                        },
                        new
                        {
                            Id = new Guid("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                            FullName = "منى يوسف",
                            IsActive = true,
                            PhoneNumber = "0104446666",
                            SubjectId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000007")
                        },
                        new
                        {
                            Id = new Guid("bbbbbbbb-bbbb-bbbb-bbbb-bbbbbbbbbbbb"),
                            FullName = "سعاد علي",
                            IsActive = true,
                            PhoneNumber = "0101113333",
                            SubjectId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000001")
                        },
                        new
                        {
                            Id = new Guid("cccccccc-cccc-cccc-cccc-cccccccccccc"),
                            FullName = "جميلة عبد الرحمن",
                            IsActive = false,
                            PhoneNumber = "0106668888",
                            SubjectId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000002")
                        },
                        new
                        {
                            Id = new Guid("dddddddd-dddd-dddd-dddd-dddddddddddd"),
                            FullName = "رنا سمير",
                            IsActive = true,
                            PhoneNumber = "0100007777",
                            SubjectId = new Guid("aaaaaaaa-bbbb-cccc-dddd-000000000003")
                        });
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.TeacherClassroom", b =>
                {
                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ClassroomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TeacherId", "ClassroomId");

                    b.HasIndex("ClassroomId");

                    b.ToTable("TeacherClassrooms");

                    b.HasData(
                        new
                        {
                            TeacherId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ClassroomId = new Guid("77777777-7777-7777-7777-777777777777")
                        },
                        new
                        {
                            TeacherId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ClassroomId = new Guid("88888888-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            TeacherId = new Guid("44444444-4444-4444-4444-444444444444"),
                            ClassroomId = new Guid("99999999-9999-9999-9999-999999999999")
                        },
                        new
                        {
                            TeacherId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ClassroomId = new Guid("77777777-7777-7777-7777-777777777777")
                        },
                        new
                        {
                            TeacherId = new Guid("55555555-5555-5555-5555-555555555555"),
                            ClassroomId = new Guid("88888888-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            TeacherId = new Guid("66666666-6666-6666-6666-666666666666"),
                            ClassroomId = new Guid("88888888-8888-8888-8888-888888888888")
                        },
                        new
                        {
                            TeacherId = new Guid("66666666-6666-6666-6666-666666666666"),
                            ClassroomId = new Guid("99999999-9999-9999-9999-999999999999")
                        });
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Attendance", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.ClassSession", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Classroom", "Classroom")
                        .WithMany("ClassSessions")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Subject", "Subject")
                        .WithMany("ClassSessions")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Teacher", "Teacher")
                        .WithMany("ClassSessions")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Fee", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Parent", "Parent")
                        .WithMany("Fees")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Student", "Student")
                        .WithMany("Fees")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Student", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Classroom", "Classroom")
                        .WithMany("Students")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Kindergarten.Domain.Entities.Parent", "Parent")
                        .WithMany("Childrens")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Classroom");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Teacher", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Subject", "Subject")
                        .WithMany("Teachers")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.TeacherClassroom", b =>
                {
                    b.HasOne("Kindergarten.Domain.Entities.Classroom", "Classroom")
                        .WithMany("TeacherClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kindergarten.Domain.Entities.Teacher", "Teacher")
                        .WithMany("TeacherClassrooms")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Classroom", b =>
                {
                    b.Navigation("ClassSessions");

                    b.Navigation("Students");

                    b.Navigation("TeacherClassrooms");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Parent", b =>
                {
                    b.Navigation("Childrens");

                    b.Navigation("Fees");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Student", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Fees");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Subject", b =>
                {
                    b.Navigation("ClassSessions");

                    b.Navigation("Teachers");
                });

            modelBuilder.Entity("Kindergarten.Domain.Entities.Teacher", b =>
                {
                    b.Navigation("ClassSessions");

                    b.Navigation("TeacherClassrooms");
                });
#pragma warning restore 612, 618
        }
    }
}
